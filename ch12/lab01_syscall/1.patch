commit 1ea312ff53d935737cf17a4f1685c0c9262d668e
Author: fzzjj2008 <fzzjj2008@126.com>
Date:   Mon Feb 7 01:02:41 2022 +0800

    ch12/lab01 add syscall_getpid

diff --git a/kernel/idt.S b/kernel/idt.S
index ee6b112..e637e80 100644
--- a/kernel/idt.S
+++ b/kernel/idt.S
@@ -1,8 +1,12 @@
 #include "idt.h"
 
+##############################################
+# 中断例程
+##############################################
 .code32
 .globl intr_entry_table
 .globl intr_exit
+
 .section .data
 intr_str:
     .asciz "interrupt occur!\n"
@@ -117,10 +121,8 @@ intr_entry_table:
     INTR_NO_ERRCODE 0x2f        # 保留
 
 ##############################################
-# 0x80系统调用中断
+# 0x80系统调用中断例程
 ##############################################
-.code 32
-.globl syscall_table
 .section .text
 .globl syscall_handler
 syscall_handler:
@@ -139,9 +141,9 @@ syscall_handler:
     push %ebx                   # 系统调用第1个参数
 
     # 调用例程
-    call *(syscall_table, %eax, 4)  # 调用[syscall_table+eax*4]的函数指针
+    call *syscall_table(, %eax, 4)  # 调用[syscall_table+eax*4]的函数指针
     addl $12, %esp
 
     # 将返回值存入当前内核栈eax位置
     movl %eax, 32(%esp)
-    jmp intr_exit
\ No newline at end of file
+    jmp intr_exit
diff --git a/kernel/init.c b/kernel/init.c
index 09d8765..98d8a24 100644
--- a/kernel/init.c
+++ b/kernel/init.c
@@ -7,6 +7,7 @@
 #include "console.h"
 #include "keyboard.h"
 #include "tss.h"
+#include "syscall_init.h"
 
 void init_all() {
     put_str("init_all\n");
@@ -17,4 +18,5 @@ void init_all() {
     console_init();
     keyboard_init();
     tss_init();
+    syscall_init();
 }
diff --git a/kernel/interrupt.c b/kernel/interrupt.c
index 822f691..72d8c20 100644
--- a/kernel/interrupt.c
+++ b/kernel/interrupt.c
@@ -26,7 +26,7 @@ char* intr_name[IDT_DESC_CNT];
 intr_handler idt_table[IDT_DESC_CNT];
 extern intr_handler intr_entry_table[IDT_DESC_CNT];
 static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function);
-
+extern uint32_t syscall_handler(void);
 
 /**
  * 开中断并返回之前的状态
diff --git a/lib/syscall.h b/lib/syscall.h
index 72f57fb..ddfc504 100644
--- a/lib/syscall.h
+++ b/lib/syscall.h
@@ -1,11 +1,12 @@
-#ifndef __LIB_STDINT_H
-#define __LIB_STDINT_H
+#ifndef __LIB_SYSCALL_H
+#define __LIB_SYSCALL_H
 
 #include "stdint.h"
 
 enum SYSCALL_NR {
     SYS_GETPID
-}
+};
+
 uint32_t getpid(void);
 
 #endif
diff --git a/thread/thread.c b/thread/thread.c
index 6c3dc50..e8ea3a2 100644
--- a/thread/thread.c
+++ b/thread/thread.c
@@ -1,5 +1,4 @@
 #include "thread.h"
-#include "stdint.h"
 #include "string.h"
 #include "global.h"
 #include "memory.h"
@@ -7,6 +6,7 @@
 #include "debug.h"
 #include "print.h"
 #include "process.h"
+#include "sync.h"
 
 struct task_struct* main_thread;            // 主线程PCB
 struct list thread_ready_list;              // 就绪队列
@@ -39,7 +39,7 @@ struct task_struct* running_thread() {
  */
 static pid_t allocate_pid(void) {
     static pid_t next_pid =0;
-    lock_aquire(&pid_lock);
+    lock_acquire(&pid_lock);
     next_pid++;
     lock_release(&pid_lock);
     return next_pid;
diff --git a/user/syscall_init.c b/user/syscall_init.c
index fde68b4..cbc85cc 100644
--- a/user/syscall_init.c
+++ b/user/syscall_init.c
@@ -1,5 +1,7 @@
 #include "syscall_init.h"
-#include "stdint.h"
+#include "syscall.h"
+#include "thread.h"
+#include "print.h"
 
 #define SYSCALL_CNT 32
 typedef void* syscall;
@@ -17,4 +19,4 @@ void syscall_init(void) {
     put_str("syscall_init start\n");
     syscall_table[SYS_GETPID] = sys_getpid;
     put_str("syscall_init done\n");
-}
\ No newline at end of file
+}
diff --git a/user/syscall_init.h b/user/syscall_init.h
index d69b7fb..5ed7b92 100644
--- a/user/syscall_init.h
+++ b/user/syscall_init.h
@@ -1,4 +1,9 @@
 #ifndef _USER_SYSCALL_INIT_H
 #define _USER_SYSCALL_INIT_H
 
+#include "stdint.h"
+
+uint32_t sys_getpid(void);
+void syscall_init(void);
+
 #endif
